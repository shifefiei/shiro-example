一、授权

授权：也叫访问控制，即在应用中控制谁可以访问那些资，需了解一下关键对象：
	(1)主体(subject):访问应用的用户
	(2)资源(Resource):在应用中用户可以访问的URL
	(3)权限(Permission):在应用中用户能不能访问某个资源
	(4)角色(Role):权限集合,不同的用户角色可以拥有一系列的权限

shiro支持三种方式授权：
	编程式、注解式、标签

1. 授权需要继承 AuthorizingRealm 类, 并实现其 doGetAuthorizationInfo 方法
2. AuthorizingRealm 类继承自 AuthenticatingRealm, 但没有实现 AuthenticatingRealm 中的
doGetAuthenticationInfo, 所以认证和授权只需要继承 AuthorizingRealm 就可以了. 同时实现他的两个抽象方法.

权限注解：
	(1)@RequiresAuthentication:表示当前Subject已经通过login进行了身份认证
	(2)@RequiresUser:表示当前Subject已经身份验证或者通过记住我登录的
	(3)@RequiresGuest:表示当前Subject没有身份验证或者通过记住我登录,即表示有个身份
	(4)@RequiresRoles(value={"admin","user"},logical=Logical.AND):表示当前Subject需要角色admin和user
	(5)@RequiresPermissions(value={"user:a","user:b"},logical=Logical.OR):表示当前Subject需要权限user:a或者user:b

二、用户密码加密

1. 为什么使用 MD5 盐值加密:即使两个人的密码一样,通过md5加密以后也不一样;
2. 如何做到:
    1). 在 doGetAuthenticationInfo 方法返回值创建 SimpleAuthenticationInfo 对象的时候, 需要使用
SimpleAuthenticationInfo(principal, credentials, credentialsSalt, realmName) 构造器
    2). 使用 ByteSource.Util.bytes() 来计算盐值.
    3). 盐值需要唯一: 一般使用随机字符串或 user id
    4). 使用 new SimpleHash(hashAlgorithmName, credentials, salt, hashIterations); 来计算盐值加密后的密码的值.

1. 如何把一个字符串加密为 MD5
2. 替换当前 Realm 的 credentialsMatcher 属性. 直接使用 HashedCredentialsMatcher 对象, 并设置加密算法即可.

三、登录认证:
通过 AuthenticatingRealm 的 credentialsMatcher 属性来进行的密码的比对!

1. 获取当前的 Subject. 调用 SecurityUtils.getSubject();
2. 测试当前的用户是否已经被认证. 即是否已经登录. 调用 Subject 的 isAuthenticated()
3. 若没有被认证, 则把用户名和密码封装为 UsernamePasswordToken 对象
	1). 创建一个表单页面
	2). 把请求提交到 SpringMVC 的 Handler
	3). 获取用户名和密码.
4. 执行登录: 调用 Subject 的 login(AuthenticationToken) 方法.
5. 自定义 Realm 的方法, 从数据库中获取对应的记录, 返回给 Shiro.
	1). 实际上需要继承 org.apache.shiro.realm.AuthenticatingRealm 类
	2). 实现 doGetAuthenticationInfo(AuthenticationToken) 方法.
6. 由 shiro 完成对密码的比对.